@inproceedings{Sangal:2005:UDM:1094811.1094824,
 author = {Sangal, Neeraj and Jordan, Ev and Sinha, Vineet and Jackson, Daniel},
 title = {Using Dependency Models to Manage Complex Software Architecture},
 booktitle = {Proceedings of the 20th Annual ACM SIGPLAN Conference on Object-oriented Programming, Systems, Languages, and Applications},
 series = {OOPSLA '05},
 year = {2005},
 isbn = {1-59593-031-0},
 location = {San Diego, CA, USA},
 pages = {167--176},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1094811.1094824},
 doi = {10.1145/1094811.1094824},
 acmid = {1094824},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {DSM, architecture, dependency, matrix, model},
} 

@Article{CalloArias2011,
author="Callo Arias, Trosky B.
and van der Spek, Pieter
and Avgeriou, Paris",
title="A practice-driven systematic review of dependency analysis solutions",
journal="Empirical Software Engineering",
year="2011",
month="Oct",
day="01",
volume="16",
number="5",
pages="544--586",
abstract="When following architecture-driven strategies to develop large software-intensive systems, the analysis of the dependencies is not an easy task. In this paper, we report a systematic literature review on dependency analysis solutions. Dependency analysis concerns making dependencies due to interconnections between programs or system components explicit. The review is practice-driven because its research questions, execution, and reporting were influenced by the practice of a group of software architects at Philips Healthcare MRI. The review results in an overview and assessment of the state-of-the-art and applicability of dependency analysis. The overview provides insights about definitions related to dependency analysis, the sort of development activities that need dependency analysis, and the classification and description of a number of dependency analysis solutions. The contribution of this paper is for both practitioners and researchers. They can take it as a reference to learn about dependency analysis, match their own practice to the presented results, and to build similar overviews of other techniques and methods for other domains or types of systems.",
issn="1573-7616",
doi="10.1007/s10664-011-9158-8",
url="https://doi.org/10.1007/s10664-011-9158-8"
}

@conference{enase19,
author={Adelina Diana Stana. and Ioana Şora.},
title={Identifying Logical Dependencies from Co-Changing Classes},
booktitle={Proceedings of the 14th International Conference on Evaluation of Novel Approaches to Software Engineering - Volume 1: ENASE,},
year={2019},
pages={486-493},
publisher={SciTePress},
organization={INSTICC},
doi={10.5220/0007758104860493},
isbn={978-989-758-375-9},
}




@article{DBLP:journals/jss/AjienkaC17,
  author    = {Nemitari Ajienka and
               Andrea Capiluppi},
  title     = {Understanding the interplay between the logical and structural coupling
               of software classes},
  journal   = {Journal of Systems and Software},
  volume    = {134},
  pages     = {120--137},
  year      = {2017},
  url       = {https://doi.org/10.1016/j.jss.2017.08.042},
  doi       = {10.1016/j.jss.2017.08.042},
  timestamp = {Fri, 03 Nov 2017 18:35:56 +0100},
  biburl    = {https://dblp.org/rec/bib/journals/jss/AjienkaC17},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{struct_dep,
author = {Binkley, David},
year = {2007},
month = {06},
pages = {104-119},
title = {Source Code Analysis: A Road Map},
isbn = {0-7695-2829-5},
journal = {FoSE 2007: Future of Software Engineering},
doi = {10.1109/FOSE.2007.27}
}

@InProceedings{wiese,
author="Wiese, Igor Scaliante
and Kuroda, Rodrigo Takashi
and Re, Reginaldo
and Oliva, Gustavo Ansaldi
and Gerosa, Marco Aur{\'e}lio",
editor="Damiani, Ernesto
and Frati, Fulvio
and Riehle, Dirk
and Wasserman, Anthony I.",
title="An Empirical Study of the Relation Between Strong Change Coupling and Defects Using History and Social Metrics in the Apache Aries Project",
booktitle="Open Source Systems: Adoption and Impact",
year="2015",
publisher="Springer International Publishing",
address="Cham",
pages="3--12",
abstract="Change coupling is an implicit relationship observed when artifacts change together during software evolution. The literature leverages change coupling analysis for several purposes. For example, researchers discovered that change coupling is associated with software defects and reveals relationships between software artifacts that cannot be found by scanning code or documentation. In this paper, we empirically investigate the strongest change couplings from the Apache Aries project to characterize and identify their impact in software development. We used historical and social metrics collected from commits and issue reports to build classification models to identify strong change couplings. Historical metrics were used because change coupling is a phenomenon associated with recurrent co-changes found in the software history. In turn, social metrics were used because developers often interact with each other in issue trackers to accomplish the tasks. Our classification models showed high accuracy, with 70−99 {\%} F-measure and 88−99 {\%} AUC. Using the same set of metrics, we also predicted the number of future defects for the artifacts involved in strong change couplings. More specifically, we were able to predict 45.7 {\%} of defects where these strong change couplings reoccurred in the post-release. These findings suggest that developers and projects managers should detect and monitor strong change couplings, because they can be associated with defects and tend to happen again in the subsequent release.",
isbn="978-3-319-17837-0"
}

@book{svn,
 author = {Collins-Sussman, Ben and Fitzpatrick, Brian W. and Pilato, C. Michael},
 title = {Version Control With Subversion for Subversion 1.6: The Official Guide And Reference Manual},
 year = {2010},
 isbn = {1440495874, 9781440495878},
 publisher = {CreateSpace},
 address = {Paramount, CA},
} 

@inproceedings{Beck:2011:CMC:2025113.2025162,
 author = {Beck, Fabian and Diehl, Stephan},
 title = {On the Congruence of Modularity and Code Coupling},
 booktitle = {Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering},
 series = {ESEC/FSE '11},
 year = {2011},
 isbn = {978-1-4503-0443-6},
 location = {Szeged, Hungary},
 pages = {354--364},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/2025113.2025162},
 doi = {10.1145/2025113.2025162},
 acmid = {2025162},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {code coupling, modularity, package design},
} 


@article{DBLP:journals/ese/AjienkaCC18,
  author    = {Nemitari Ajienka and
               Andrea Capiluppi and
               Steve Counsell},
  title     = {An empirical study on the interplay between semantic coupling and
               co-change of software classes},
  journal   = {Empirical Software Engineering},
  volume    = {23},
  number    = {3},
  pages     = {1791--1825},
  year      = {2018},
  url       = {https://doi.org/10.1007/s10664-017-9569-2},
  doi       = {10.1007/s10664-017-9569-2},
  timestamp = {Mon, 04 Jun 2018 15:56:43 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/ese/AjienkaCC18},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}


@Article{Poshyvanyk2009,
author="Poshyvanyk, Denys
and Marcus, Andrian
and Ferenc, Rudolf
and Gyim{\'o}thy, Tibor",
title="Using information retrieval based coupling measures for impact analysis",
journal="Empirical Software Engineering",
year="2009",
month="Feb",
day="01",
volume="14",
number="1",
pages="5--32",
abstract="Coupling is an important property of software systems, which directly impacts program comprehension. In addition, the strength of coupling measured between modules in software is often used as a predictor of external software quality attributes such as changeability, ripple effects of changes and fault-proneness. This paper presents a new set of coupling measures for Object-Oriented (OO) software systems measuring conceptual coupling of classes. Conceptual coupling is based on measuring the degree to which the identifiers and comments from different classes relate to each other. This type of relationship, called conceptual coupling, is measured through the use of Information Retrieval (IR) techniques. The proposed measures are different from existing coupling measures and they capture new dimensions of coupling, which are not captured by the existing coupling measures. The paper investigates the use of the conceptual coupling measures during change impact analysis. The paper reports the findings of a case study in the source code of the Mozilla web browser, where the conceptual coupling metrics were compared to nine existing structural coupling metrics and proved to be better predictors for classes impacted by changes.",
issn="1573-7616",
doi="10.1007/s10664-008-9088-2",
url="https://doi.org/10.1007/s10664-008-9088-2"
}


@inproceedings{Oliva:2011:ISL:2067853.2068086,
 author = {Oliva, Gustavo Ansaldi and Gerosa, Marco Aurelio},
 title = {On the Interplay Between Structural and Logical Dependencies in Open-Source Software},
 booktitle = {Proceedings of the 2011 25th Brazilian Symposium on Software Engineering},
 series = {SBES '11},
 year = {2011},
 isbn = {978-0-7695-4603-2},
 pages = {144--153},
 numpages = {10},
 url = {https://doi.org/10.1109/SBES.2011.39},
 doi = {10.1109/SBES.2011.39},
 acmid = {2068086},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
 keywords = {mining software repositories, dependency management, structural analysis, structural dependencies, structural coupling, logical dependencies, logical coupling, software evolution},
} 





@inproceedings{DBLP:conf/issre/OlivaG15,
  author    = {Gustavo Ansaldi Oliva and
               Marco Aur{\'{e}}lio Gerosa},
  title     = {Experience report: How do structural dependencies influence change
               propagation? An empirical study},
  booktitle = {26th {IEEE} International Symposium on Software Reliability Engineering,
               {ISSRE} 2015, Gaithersbury, MD, USA, November 2-5, 2015},
  pages     = {250--260},
  year      = {2015},
  url       = {https://doi.org/10.1109/ISSRE.2015.7381818},
  doi       = {10.1109/ISSRE.2015.7381818},
  timestamp = {Thu, 25 May 2017 00:43:41 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/issre/OlivaG15},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}


@inproceedings{Bennett:2000:SME:336512.336534,
 author = {Bennett, Keith H. and Rajlich, V\'{a}clav T.},
 title = {Software Maintenance and Evolution: A Roadmap},
 booktitle = {Proceedings of the Conference on The Future of Software Engineering},
 series = {ICSE '00},
 year = {2000},
 isbn = {1-58113-253-0},
 location = {Limerick, Ireland},
 pages = {73--87},
 numpages = {15},
 url = {http://doi.acm.org/10.1145/336512.336534},
 doi = {10.1145/336512.336534},
 acmid = {336534},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@inproceedings{Zimmermann:2004:MVH:998675.999460,
 author = {Zimmermann, Thomas and Weisgerber, Peter and Diehl, Stephan and Zeller, Andreas},
 title = {Mining Version Histories to Guide Software Changes},
 booktitle = {Proceedings of the 26th International Conference on Software Engineering},
 series = {ICSE '04},
 year = {2004},
 isbn = {0-7695-2163-0},
 pages = {563--572},
 numpages = {10},
 url = {http://dl.acm.org/citation.cfm?id=998675.999460},
 acmid = {999460},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
} 



@Article{Yu2007,
author="Yu, Liguo",
title="Understanding component co-evolution with a study on Linux",
journal="Empirical Software Engineering",
year="2007",
month="Apr",
day="01",
volume="12",
number="2",
pages="123--141",
abstract="After a software system has been delivered, it inevitably has to change to remain useful. Evolutionary coupling measures the change dependencies between software components. Reference coupling measures the architecture dependencies between software components. In this paper, we present a method to correlate evolutionary coupling and reference coupling. We study the evolution of 597 consecutive versions of Linux and measure the evolutionary coupling and reference coupling among 12 kernel modules. We compare 12 pairs of evolutionary coupling data and reference coupling data. The results show that linear correlation exists between evolutionary coupling and reference coupling. We conclude that in Linux, the dependencies between software components induced via the system architecture have noticeable effects on kernel module co-evolution.",
issn="1573-7616",
doi="10.1007/s10664-006-9000-x",
url="https://doi.org/10.1007/s10664-006-9000-x"
}


@inproceedings{Gall:1998:DLC:850947.853338,
 author = {Gall, Harald and Hajek, Karin and Jazayeri, Mehdi},
 title = {Detection of Logical Coupling Based on Product Release History},
 booktitle = {Proceedings of the International Conference on Software Maintenance},
 series = {ICSM '98},
 year = {1998},
 isbn = {0-8186-8779-7},
 pages = {190--},
 url = {http://dl.acm.org/citation.cfm?id=850947.853338},
 acmid = {853338},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
}

@inproceedings{Gall:2003:CRH:942803.943741,
 author = {Gall, Harald and Jazayeri, Mehdi and Krajewski, Jacek},
 title = {CVS Release History Data for Detecting Logical Couplings},
 booktitle = {Proceedings of the 6th International Workshop on Principles of Software Evolution},
 series = {IWPSE '03},
 year = {2003},
 isbn = {0-7695-1903-2},
 pages = {13--},
 url = {http://dl.acm.org/citation.cfm?id=942803.943741},
 acmid = {943741},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
} 


@article{Shtern:2012:CMS:2332427.2332428,
 author = {Shtern, Mark and Tzerpos, Vassilios},
 title = {Clustering Methodologies for Software Engineering},
 journal = {Adv. Soft. Eng.},
 issue_date = {January 2012},
 volume = {2012},
 month = jan,
 year = {2012},
 issn = {1687-8655},
 pages = {1:1--1:1},
 articleno = {1},
 numpages = {1},
 url = {http://dx.doi.org/10.1155/2012/792024},
 doi = {10.1155/2012/792024},
 acmid = {2332428},
 publisher = {Hindawi Publishing Corp.},
 address = {New York, NY, United States},
} 


@ARTICLE{sar, 
author={S. Ducasse and D. Pollet}, 
journal={IEEE Transactions on Software Engineering}, 
title={Software Architecture Reconstruction: A Process-Oriented Taxonomy}, 
year={2009}, 
volume={35}, 
number={4}, 
pages={573-591}, 
keywords={software architecture;software maintenance;software packages;process-oriented taxonomy;software architecture reconstruction;software development;Software architecture reconstruction.}, 
doi={10.1109/TSE.2009.19}, 
ISSN={0098-5589}, 
month={July},}



@INPROCEEDINGS{posh2010, 
author={H. Kagdi and M. Gethers and D. Poshyvanyk and M. L. Collard}, 
booktitle={2010 17th Working Conference on Reverse Engineering}, 
title={Blending Conceptual and Evolutionary Couplings to Support Change Impact Analysis in Source Code}, 
year={2010}, 
volume={}, 
number={}, 
pages={119-128}, 
keywords={information retrieval;public domain software;set theory;software maintenance;source coding;Apache httpd;ArgoUML;KOffice;change impact analysis;conceptual coupling;evolutionary coupling;iBatis;impact sets;information retrieval;open source system;single version software system;source code;Accuracy;Couplings;Data mining;Estimation;Servers;Software systems}, 
doi={10.1109/WCRE.2010.21}, 
ISSN={1095-1350}, 
month={Oct},}


@conference{SoraSem13,
author={Ioana \c{S}ora},
title={Software Architecture Reconstruction through Clustering: Finding the Right Similarity Factors},
booktitle={Proceedings of the 1st International Workshop in Software Evolution and Modernization - Volume 1: SEM, (ENASE 2013)},
year={2013},
pages={45-54},
publisher={SciTePress},
organization={INSTICC},
doi={10.5220/0004599600450054},
isbn={978-989-8565-66-2},
}

@inproceedings{PagerankENASE,
   author    = {Ioana \c{S}ora},
   title     = {Helping Program Comprehension of Large Software Systems 
by Identifying
                Their Most Important Classes},
   booktitle = {Evaluation of Novel Approaches to Software Engineering - 
10th International
                Conference, {ENASE} 2015, Barcelona, Spain, April 29-30, 
2015, Revised
                Selected Papers},
   pages     = {122--140},
   year      = {2015},
   publisher = {Springer International Publishing},
   doi       = {10.1007/978-3-319-30243-0_7},
   timestamp = {Fri, 19 May 2017 01:26:11 +0200},
   biburl    = {https://dblp.org/rec/bib/conf/enase/Sora15a},
   bibsource = {dblp computer science bibliography, https://dblp.org},
}



@INPROCEEDINGS{PagerankSACI, 
author="{\c{S}}ora, Ioana", 
booktitle={2015 IEEE 10th Jubilee International Symposium on Applied Computational Intelligence and Informatics (SACI)}, 
title={A {PageRank} based recommender system for identifying key classes in software systems}, 
year={2015}, 
pages={495-500}, 
keywords={graph theory;program diagnostics;recommender systems;software maintenance;PageRank;graph ranking algorithm;key classes identification;open source real life systems;recommender system;software evolution;software maintenance;software systems;system static dependencies structure;Computational intelligence;Documentation;Java;Object oriented modeling;Software algorithms;Software systems}, 
doi={10.1109/SACI.2015.7208254}, 
month={May},}



@InProceedings{SoraSpringer,
author="\c{S}ora, Ioana",
editor="Maciaszek, Leszek A.
and Filipe, Joaquim",
title="Helping Program Comprehension of Large Software Systems by Identifying Their Most Important Classes",
booktitle="Evaluation of Novel Approaches to Software Engineering",
year="2016",
publisher="Springer International Publishing",
address="Cham",
pages="122--140",
abstract="An essential prerequisite before engaging in any maintenance activities of complex software systems is the good comprehension of the existing code. Program comprehension is supported by documentation, which can be either developer documentation or documentation obtained by reverse engineering. In both cases, but especially in the case of reverse engineered documentation, this means a large amount of detailed documents that have to be carefully studied. Processing such large and detailed information can be made easier if there is an executive summary - a short document pointing to the most important elements of the system.",
isbn="978-3-319-30243-0"
}




@INPROCEEDINGS{SoraConti, 
author={\c{S}ora, Ioana and Glodean, Gabriel and Gligor, Mihai}, 
booktitle={Computational Cybernetics and Technical Informatics ({ICCC-CONTI}), 2010 International Joint Conference on}, 
title={Software architecture reconstruction: An approach based on combining graph clustering and partitioning}, 
year={2010}, 
month={May}, 
pages={259-264}, 
keywords={Application software;Clustering algorithms;Computer architecture;Documentation;Object oriented modeling;Partitioning algorithms;Software algorithms;Software architecture;Software maintenance;Software systems;clustering;partitioning;software architecture}, 
doi={10.1109/ICCCYB.2010.5491289},}


@article {ZaidmanJurnal,
author = {Zaidman, Andy and Demeyer, Serge},
title = {Automatic identification of key classes in a software system using webmining techniques},
journal = {Journal of Software Maintenance and Evolution: Research and Practice},
volume = {20},
number = {6},
publisher = {John Wiley & Sons, Ltd.},
issn = {1532-0618},
pages = {387--417},
keywords = {program comprehension, dynamic analysis, webmining, coupling},
year = {2008},
}



@inproceedings{Gueheneuc,
 author = {Gu{\'e}h{\'e}neuc, Yann-Ga\"{e}l},
 title = {A Reverse Engineering Tool for Precise Class Diagrams},
 booktitle = {Proceedings of the 2004 Conference of the Centre for Advanced Studies on Collaborative Research},
 series = {CASCON '04},
 year = {2004},
 location = {Markham, Ontario, Canada},
 pages = {28--41},
 numpages = {14},
  publisher = {IBM Press},
} 


@INPROCEEDINGS{1199197, 
author={M. L. Collard and H. H. Kagdi and J. I. Maletic}, 
booktitle={11th IEEE International Workshop on Program Comprehension, 2003.}, 
title={An {XML}-based lightweight {C++} fact extractor}, 
year={2003}, 
volume={}, 
number={}, 
pages={134-143}, 
keywords={C++ language;XML;grammars;reverse engineering;software maintenance;software tools;XML representation;XML tools;XPath;XSLT;incomplete source code;lightweight C++ fact extractor;maintenance;noncompilable source code;partial parsing;program understanding;reverse engineering;software engineering;source code programs;srcML;Computer science;Data mining;Reverse engineering;Robustness;Software engineering;Software systems;Software testing;System testing;White spaces;XML}, 
doi={10.1109/WPC.2003.1199197}, 
ISSN={1092-8138}, 
month={May},}


@inproceedings{2003:XLC:851042.857028,
author = {M. L. Collard and H. H. Kagdi and J. I. Maletic}, 
 title = {An {XML}-Based Lightweight {C++} Fact Extractor},
 booktitle = {Proceedings of the 11th IEEE International Workshop on Program Comprehension},
 series = {IWPC '03},
 year = {2003},
 isbn = {0-7695-1883-4},
 pages = {134--},
 url = {http://dl.acm.org/citation.cfm?id=851042.857028},
 acmid = {857028},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
key = {{$\!\!$}} ,
} 


@inproceedings{Collard:2011:LTF:2067850.2068011,
 author = {Collard, Michael L. and Decker, Michael J. and Maletic, Jonathan I.},
 title = {Lightweight Transformation and Fact Extraction with the {srcML} Toolkit},
 booktitle = {Proceedings of the 2011 IEEE 11th International Working Conference on Source Code Analysis and Manipulation},
 series = {SCAM '11},
 year = {2011},
 isbn = {978-0-7695-4347-5},
 pages = {173--184},
 numpages = {12},
 url = {https://doi.org/10.1109/SCAM.2011.19},
 doi = {10.1109/SCAM.2011.19},
 acmid = {2068011},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
 keywords = {Source Transformation, Fact Extraction, srcML},
} 


@INPROCEEDINGS{SoftwareMining2018,
author={Adelina Diana Stana and Ioana \c{S}ora},
booktitle={Submitted to The 7th International Workshop on Software 
Mining ({SoftwareMining}) at ASE 2018},
title={Identifying logical dependencies from co-changing classes},
location = {Montpelier, France},
year={2018},
}

@mastersthesis{mastersthesis,
   author       = {Adelina Diana Stana},
   title        = {An analysis of the relationship between structural and 
logical dependencies in software systems},
   school       = {Politehnica University Timisoara},
   year         = 2018,
   address      = {Romania},
   month        = {June},

}

@Article{Kalliamvakou2016,
author="Kalliamvakou, Eirini
and Gousios, Georgios
and Blincoe, Kelly
and Singer, Leif
and German, Daniel M.
and Damian, Daniela",
title="An in-depth study of the promises and perils of mining GitHub",
journal="Empirical Software Engineering",
year="2016",
month="Oct",
day="01",
volume="21",
number="5",
pages="2035--2071",
abstract="With over 10 million git repositories, GitHub is becoming one of the most important sources of software artifacts on the Internet. Researchers mine the information stored in GitHub's event logs to understand how its users employ the site to collaborate on software, but so far there have been no studies describing the quality and properties of the available GitHub data. We document the results of an empirical study aimed at understanding the characteristics of the repositories and users in GitHub; we see how users take advantage of GitHub's main features and how their activity is tracked on GitHub and related datasets to point out misalignment between the real and mined data. Our results indicate that while GitHub is a rich source of data on software development, mining GitHub for research purposes should take various potential perils into consideration. For example, we show that the majority of the projects are personal and inactive, and that almost 40 {\%} of all pull requests do not appear as merged even though they were. Also, approximately half of GitHub's registered users do not have public activity, while the activity of GitHub users in repositories is not always easy to pinpoint. We use our identified perils to see if they can pose validity threats; we review selected papers from the MSR 2014 Mining Challenge and see if there are potential impacts to consider. We provide a set of recommendations for software engineering researchers on how to approach the data in GitHub.",
issn="1573-7616",
doi="10.1007/s10664-015-9393-5",
url="https://doi.org/10.1007/s10664-015-9393-5"
}

@INPROCEEDINGS{1553643, 
author={Xiaoxia Ren and B. G. Ryder and M. Stoerzer and F. Tip}, 
booktitle={Proceedings. 27th International Conference on Software Engineering, 2005. ICSE 2005.}, 
title={Chianti: a change impact analysis tool for Java programs}, 
year={2005}, 
volume={}, 
number={}, 
pages={664-665}, 
keywords={Java;program debugging;software tools;Java program;change impact analysis tool;debugging technique;eclipse environment;object-oriented program;partial order interdependence;regression test;Algorithm design and analysis;Debugging;Java;Logic programming;Logic testing;Object oriented programming;Programming profession;Software engineering;Software systems;Software testing}, 
doi={10.1109/ICSE.2005.1553643}, 
ISSN={0270-5257}, 
month={May},}

@book{Booch:2004:OAD:975416,
 author = {Booch, Grady},
 title = {Object-Oriented Analysis and Design with Applications (3rd Edition)},
 year = {2004},
 isbn = {020189551X},
 publisher = {Addison Wesley Longman Publishing Co., Inc.},
 address = {Redwood City, CA, USA},
}

@article{Cataldo2009SoftwareDW,
  title={Software Dependencies, Work Dependencies, and Their Impact on Failures},
  author={Marcelo Cataldo and Audris Mockus and Jeffrey A. Roberts and James D. Herbsleb},
  journal={IEEE Transactions on Software Engineering},
  year={2009},
  volume={35},
  pages={864-878}
}

@article{Yu:2007:UCC:1231330.1231370,
 author = {Yu, Liguo},
 title = {Understanding Component Co-evolution with a Study on Linux},
 journal = {Empirical Softw. Engg.},
 issue_date = {April     2007},
 volume = {12},
 number = {2},
 month = apr,
 year = {2007},
 issn = {1382-3256},
 pages = {123--141},
 numpages = {19},
 url = {http://dx.doi.org/10.1007/s10664-006-9000-x},
 doi = {10.1007/s10664-006-9000-x},
 acmid = {1231370},
 publisher = {Kluwer Academic Publishers},
 address = {Hingham, MA, USA},
 keywords = {Co-evolution, Coupling, Linux, Software evolution},
} 

@INPROCEEDINGS{dep:generation, 
author={P. {Wang} and J. {Yang} and L. {Tan} and R. {Kroeger} and J. {David Morgenthaler}}, 
booktitle={2013 4th International Workshop on Managing Technical Debt (MTD)}, 
title={Generating precise dependencies for large software}, 
year={2013}, 
volume={}, 
number={}, 
pages={47-50}, 
keywords={C++ language;project management;software engineering;software management;intra-module dependency;inter-module dependency;technical debt;long-term software development;code dependency;large C/C++ software projects;symbol-level dependency;module-level dependency;software system;underutilized dependency;inconsistent dependency;refactoring opportunity;large-scale refactoring tasks;Chromium;Google;Couplings;Libraries;Browsers;Software systems;dependency large scale;technical debt}, 
doi={10.1109/MTD.2013.6608678}, 
ISSN={}, 
month={May},}

@ARTICLE{1702084, 
author={D. H. {Hutchens} and V. R. {Basili}}, 
journal={IEEE Transactions on Software Engineering}, 
title={System Structure Analysis: Clustering with Data Bindings}, 
year={1985}, 
volume={SE-11}, 
number={8}, 
pages={749-757}, 
keywords={Cluster;coupling;data binding;module;measurement;system structure;Data analysis;Computer science;Documentation;Military computing;Proposals;Computerized monitoring;Fluid flow measurement;Stability analysis;Cluster;coupling;data binding;module;measurement;system structure}, 
doi={10.1109/TSE.1985.232524}, 
ISSN={0098-5589}, 
month={Aug},}

@INPROCEEDINGS{341244, 
author={P. K. {Linos} and V. {Courtois}}, 
booktitle={Proceedings 1994 IEEE 3rd Workshop on Program Comprehension- WPC '94}, 
title={A tool for understanding object-oriented program dependencies}, 
year={1994}, 
volume={}, 
number={}, 
pages={20-27}, 
keywords={object-oriented programming;inheritance;software maintenance;systems re-engineering;software tools;C language;object-oriented languages;reverse engineering;object-oriented program dependencies;C++ program re engineering;OO!CARE;Object-Oriented Computer Aided Re Engineering;object oriented program dependencies;data objects;CARE;object-oriented programming paradigm;inheritance;polymorphism;OOP;Visualization;Computer languages;Software tools;Software maintenance;Computer science;Object oriented programming;Visual databases;Taxonomy;Message passing;Industrial relations}, 
doi={10.1109/WPC.1994.341244}, 
ISSN={1092-8138}, 
month={Nov},}

@MISC{Wilde90understandingprogram,
    author = {Norman Wilde},
    title = {Understanding Program Dependencies},
    year = {1990}
}

@inproceedings{Bennett,
author = {H. Bennett, Keith and Rajlich, Vaclav},
year = {2000},
month = {05},
pages = {73-87},
title = {Software Maintenance and Evolution: a Roadmap},
doi = {10.1145/336512.336534}
}

@book{Yang:2003:SES:599790,
 author = {Yang, Hongji and Ward, Martin},
 title = {Successful Evolution of Software Systems},
 year = {2003},
 isbn = {1580533493},
 publisher = {Artech House, Inc.},
 address = {Norwood, MA, USA},
} 

@article{Lientz:1981:PAS:358790.358796,
 author = {Lientz, Bennet P. and Swanson, E. Burton},
 title = {Problems in Application Software Maintenance},
 journal = {Commun. ACM},
 issue_date = {Nov. 1981},
 volume = {24},
 number = {11},
 month = nov,
 year = {1981},
 issn = {0001-0782},
 pages = {763--769},
 numpages = {7},
 url = {http://doi.acm.org/10.1145/358790.358796},
 doi = {10.1145/358790.358796},
 acmid = {358796},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {application software maintenance, maintenance problem factors},
} 

@inproceedings{nsbreloaded,
author = {Fraser, Steven and Brooks, Jr, Frederick and Fowler, Martin and Lopez, Ricardo and Namioka, Aki and M. Northrop, Linda and Parnas, David and Thomas, Dave},
year = {2007},
month = {01},
pages = {1026-1030},
title = {"No silver bullet" reloaded: retrospective on "essence and accidents of software engineering".},
doi = {10.1145/1297846.1297973}
}

@article{Brooks:1987:NSB:26440.26441,
 author = {Brooks,Jr., Frederick P.},
 title = {No Silver Bullet Essence and Accidents of Software Engineering},
 journal = {Computer},
 issue_date = {April 1987},
 volume = {20},
 number = {4},
 month = apr,
 year = {1987},
 issn = {0018-9162},
 pages = {10--19},
 numpages = {10},
 url = {https://doi.org/10.1109/MC.1987.1663532},
 doi = {10.1109/MC.1987.1663532},
 acmid = {26441},
 publisher = {IEEE Computer Society Press},
 address = {Los Alamitos, CA, USA},
} 

@article{model-bennett,
author = {H. Bennett, K and Le, Dh and Rajlich, Vaclav},
year = {2000},
month = {05},
pages = {},
title = {The staged model of the software lifecycle: A new perspective on software evolution}
}
